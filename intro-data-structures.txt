1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
    A. ridersInLine.push('Mary');
c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
    A. var josh = ridersInLine.indexOf('Josh');
d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?
    var findRiderIndex = function(name) {
        var riderIndex = ridersInLine.indexOf(name);
        return (riderIndex >= 0) ? riderIndex: 'Rider not found'
    }
e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?
    A. 
f) If Patrick wants to leave the line, how would you delete him from the array?
    A. var findInsertPoint = function(name1, name2) {
            var insertPoint = ridersInLine.indexOf(name1);
            ridersInLine.splice(insertPoint, 0, name2);
            return ridersInLine;
        }
        
2. Provide another real-world example that you can model using a data structure.
    A. One could use a data structure for inventory items. The data structure may hold the item name, price, and quantity in stock.

3. How would your data structure allow developers to access and manipulate the data?
    A. By storing an items price, one could sort for items in a specific price range. By using quantity in stock, one could reorder based on
    that quantity, or use it to notify a customer that the item isn't available. 