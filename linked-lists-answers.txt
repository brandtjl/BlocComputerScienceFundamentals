1. What are some pros and cons of using linked lists instead of arrays?
    A.  Linked lists do not require consecutive memory blocks. But you cannot access a linked list element directly via an index.
        To find a specific element, you must search from the beginning. 
2. Come up with a real world example of a linked list.
    A.  The line at the DMV office where each customer takes a number and you wait until your number is called before getting processed. 

Programming Questions
1. The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.

    LinkedList.prototype.push = function(element) {
    SET node = {
    value: element,
    next: null
    }

    IF the head node does not exist
    THEN SET head to node
    ELSE
    SET current node to head
    SET current.next to node
    }
    }
        A. I'm not sure how we are supposed to be able to find a bug when we haven't really been taught how to create a linked list. Not enough
        information in this checkpoint to fully understand whats going on or whats being asked. So I'm gonna have to guess that the bug is the fact
        that the line to set current.next should not be inside that else statement?

2. Given an unsorted singly linked list, remove all duplicates from the linked list.
    Example
    Input: a -> c -> d -> d -> a
    Output: a -> c -> d
        A.  Create HashMapDuplicates
            while there is a next element in the linked list   
                if not in HashMapDuplicates
                    add element to HashMapDuplicates
                endif
            endwhile
            return HashMapDuplicates

3. Given an unsorted singly linked list, reverse it.
    Example
    Input: a -> b -> c -> d
    Output: d -> c -> b -> a
        A.  if head is null
                return null
            prev ← null
            while head.next is not null
                head.next ← prev
                prev ← head
                head ← old value of head.next
            head.next ← prev
            return head