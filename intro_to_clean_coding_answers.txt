1. In your own words, explain what clean code is and why it is important.
    A. Clean code is refers to the idea of writing readable code. Clean code is simpler and makes code maintenance much easier.
    Clean code is very important when working with others and/or on large projects. If the code is easily readable, developers will spend
    less time doing their maintenance tasks. 

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, 
think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.
    A. 

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

    A. No, I would not consider this to be clean code. There are too many comments. The function and variable names are not meaningful,
    and the statements aren't nested/indented. 
    FUNCTION convertDegrees(degrees, type)
        if type = "F" THEN                            //convert fahrenheit to celsius
            set newDegrees to (degrees-32) * (5/9)
            print newDegrees
        else if type = "C" THEN                      //convert celsius to fahrenheit
            set newDegrees to degrees * 1.8000 + 32
            print newDegrees
        end If
    end function

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

    A. Yes, I would consider this clean code. It reads easy and the function and variable names are meaningful.


5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.
a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

    A.  FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
            var totalDue = subTotal * discountRate + (subTotal * tax)
            PRINT 'Your total due is: ' + totalDue
        
            CALL getPayment RETURNING amount
            IF paymentType = 'CASH THEN
                PRINT 'Change due: ' + amount - totalDue
            ELSE IF paymentType = 'CREDIT CARD' THEN
                PRINT 'Your credit card has been charged: ' + totalDue
            END If
        END FUNCTION



b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION


    A.  FUNCTION checkOutBook(book, guest)
            IF isAbleToCheckOut(guest) THEN
                APPEND book to guest.books
                SET book.status to 'Checked Out'
                PRINT 'Your books have been issued.'
            ELSE
                PRINT 'Unable to check out book.'
            END If
        END FUNCTION

        FUNCTION isAbleToCheckOut(guest)
            RETURN guest.accountActive and NOT(guest.hasOverdueBooks) and guest.outstandingFees = 0
        END FUNCTION


c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.
CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

    A.  CLASS BankAccount

            FUNCTION displayBalance
                PRINT balance
            END FUNCTION

            FUNCTION deposit(amount)
                SET balance to balance + amount
            END FUNCTION

            FUNCTION withdraw(amount)
                IF balance > amount THEN
                    SET balance to balance - amount
                END
            END FUNCTION
        END

        CLASS Offers

            FUNCTION creditCardOffer
                IF NOT(customer.hasCreditCard) THEN
                    CALL offerCreditCard
                END
            END FUNCTION

            FUNCTION checkStatus
                IF NOT(customer.hasCheckingAccount) THEN
                    CALL offerCheckingAccount
                END
            END FUNCTION

        ....
        ....
        ....

        END
